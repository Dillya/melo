/* Melo playlist protobuf */

syntax = "proto3";

import "tags.proto";

package Playlist;

/* Playlist media index */
message MediaIndex {
  /* Index of the media in the playlist */
  uint32 index = 1;
  /* Index of the sub-media from the current media (-1 if not applicable) */
  int32 sub_index = 2;
}

/* Playlist sub-media */
message SubMedia {
  /* Sub-media index */
  uint32 index = 1;
  /* Parent index */
  uint32 parent = 2;
  /* Name to display */
  string name = 3;
  /* Media tags (optional) */
  Tags.Tags tags = 4;
  /* Media is playable */
  bool playable = 5;
  /* Media is movable */
  bool movable = 6;
  /* Media is deletable */
  bool deletable = 7;
}

/* Playlist media */
message Media {
  /* Media index */
  uint32 index = 1;
  /* Name to display */
  string name = 2;
  /* Media tags (optional) */
  Tags.Tags tags = 3;
  /* Media is playable */
  bool playable = 4;
  /* Media is deletable */
  bool deletable = 5;
  /* List of sub-medias */
  repeated SubMedia sub_medias = 6;
}

/* Playlist range */
message Range {
  /* Linear range or discontinuous range */
  bool linear = 1;
  /* First index for a linear range */
  MediaIndex first = 2;
  /* Last (inclusive) for a linear range */
  MediaIndex last = 3;
  /* List of indexes for discontinuous range */
  repeated MediaIndex list = 4;
}

/* Move a range */
message Move {
  /* Range of medias to move */
  Range range = 1;
  /* Offset to move to */
  int32 offset = 2;
}

/* Playlist event */
message Event {
  /* Events */
  oneof event {
    /* A media has been added to list */
    Media add = 10;
    /* A sub-media has been added to list */
    SubMedia add_sub = 11;
    /* A media has been updated */
    Media update = 12;
    /* A sub-media has been updated */
    SubMedia update_sub = 13;
    /* Current playing media has changed, contains the ID of the new one */
    MediaIndex play = 14;
    /* Some medias have been moved */
    Move move = 15;
    /* Some medias have been removed */
    Range delete = 16;
  }
}

/* Playlist request */
message Request {
  /* Get media list request */
  message GetMediaList {
    /* Number of media to get */
    uint32 count = 1;
    /* Start point in media list */
    uint32 offset = 2;
  }

  /* Requests */
  oneof req {
    /* Get medias playlist (resp: Playlist.Response.media_list) */
    GetMediaList get_media_list = 10;
    /* Get ID of the current playing media (resp: Playlist.Response.current) */
    bool get_current = 11;
    /* Play the media by ID (resp: none) */
    MediaIndex play = 12;
    /* Move a range of medias (resp: none) */
    Move move = 13;
    /* Delete a range of medias (resp: none) */
    Range delete = 14;
  }
}

/* Playlist response */
message Response {
  /* Media list response */
  message MediaList {
    /* Effective count, can be smaller than request count */
    uint32 count = 1;
    /* Effective offset, can be smaller than request offset */
    uint32 offset = 2;
    /* ID of the current playing media */
    MediaIndex current = 3;
    /* List of medias */
    repeated Media medias = 4;
  }

  /* Responses */
  oneof resp {
    /* Medias in playlist req Playlist.Request.get_media_list) */
    MediaList media_list = 10;
    /* ID of current playing media (req Playlist.Request.get_current) */
    MediaIndex current = 11;
  }
}
